import { useState } from "react";
import "../../Design_Css/User/Booking_Room.css";
import HeaderBookingRoom from "../../Components/User/Components_Js/HeaderBookingRoom";
import FooterUser from "../../Components/User/Components_Js/FooterUser";
import Notification_BookingRoom from "../../Components/User/Components_Js/Notification_BookingRoom";

export default function Booking_Room_LoggedIn() {
  const [currentStep, setCurrentStep] = useState(1);
  const [selectedRooms, setSelectedRooms] = useState([]);
  const [selectedServices, setSelectedServices] = useState([]);
  const [additionalInfo, setAdditionalInfo] = useState("");
  const [remainingChars, setRemainingChars] = useState(500);
  const [isModalOpen, setIsModalOpen] = useState(false); // State ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o

  // D·ªØ li·ªáu d·ªãch v·ª•
  const services = [
    {
      id: "one-way",
      title: "ƒê∆∞a ƒë√≥n s√¢n bay m·ªôt chi·ªÅu",
      price: 1000000,
      priceText: "1.000.000 VND",
    },
    {
      id: "two-way",
      title: "ƒê∆∞a ƒë√≥n s√¢n bay hai chi·ªÅu",
      price: 2000000,
      priceText: "2.000.000 VND",
    },
  ];

  // D·ªØ li·ªáu ph√≤ng
  const [rooms, setRooms] = useState([
    {
      id: "single",
      name: "Ph√≤ng ƒê∆°n",
      title: "Ph√≤ng ƒê∆°n (Single Room)",
      description: "Kh√¥ng gian ri√™ng t∆∞ d√†nh cho 1 kh√°ch, ƒë·∫ßy ƒë·ªß ti·ªán nghi nh∆∞ TV, wifi, minibar v√† b√†n l√†m vi·ªác.",
      price: 1000000,
      priceText: "1.000.000 VND",
      bedType: "Gi∆∞·ªùng ƒë√¥i",
      capacity: "1 ƒë√™m, 1 ng∆∞·ªùi",
      images: [
        "./Img_User/Img_Room_1.png",
        "./Img_User/Img_Room_2.png",
        "./Img_User/Img_Room_3.png",
        "./Img_User/Img_Room_1.png",
      ],
      features: [
        { icon: "üç≥", text: "Bao g·ªìm b·ªØa s√°ng" },
        { icon: "‚ùå", text: "Kh√¥ng th·ªÉ h·ªßy, s·ª≠a ƒë·ªïi" },
        { icon: "üí≥", text: "Thanh to√°n sau" },
      ],
    },
    {
      id: "double",
      name: "Ph√≤ng ƒê√¥i",
      title: "Ph√≤ng ƒê√¥i (Double Room)",
      description: "Kh√¥ng gian tho·∫£i m√°i d√†nh cho 2 kh√°ch, ƒë·∫ßy ƒë·ªß ti·ªán nghi nh∆∞ TV, wifi, minibar v√† b√†n l√†m vi·ªác.",
      price: 1500000,
      priceText: "1.500.000 VND",
      bedType: "Gi∆∞·ªùng ƒë√¥i l·ªõn",
      capacity: "1 ƒë√™m, 2 ng∆∞·ªùi",
      images: [
        "./Img_User/Img_Room_1.png",
        "./Img_User/Img_Room_2.png",
        "./Img_User/Img_Room_3.png",
        "./Img_User/Img_Room_1.png",
      ],
      features: [
        { icon: "üç≥", text: "Bao g·ªìm b·ªØa s√°ng" },
        { icon: "‚úì", text: "Mi·ªÖn ph√≠ h·ªßy tr∆∞·ªõc 3 ng√†y" },
        { icon: "üí≥", text: "Thanh to√°n sau" },
      ],
    },
    {
      id: "deluxe",
      name: "Ph√≤ng Deluxe",
      title: "Ph√≤ng Deluxe (Deluxe Room)",
      description: "Ph√≤ng sang tr·ªçng v·ªõi kh√¥ng gian r·ªông r√£i, view ƒë·∫πp v√† ƒë·∫ßy ƒë·ªß ti·ªán nghi cao c·∫•p.",
      price: 2000000,
      priceText: "2.000.000 VND",
      bedType: "Gi∆∞·ªùng King",
      capacity: "1 ƒë√™m, 2 ng∆∞·ªùi",
      images: [
        "./Img_User/Img_Room_1.png",
        "./Img_User/Img_Room_2.png",
        "./Img_User/Img_Room_3.png",
        "./Img_User/Img_Room_1.png",
      ],
      features: [
        { icon: "üç≥", text: "Bao g·ªìm b·ªØa s√°ng" },
        { icon: "‚úì", text: "Mi·ªÖn ph√≠ h·ªßy tr∆∞·ªõc 1 ng√†y" },
        { icon: "üõÅ", text: "B·ªìn t·∫Øm v√† v√≤i sen ri√™ng" },
      ],
    },
  ]);

  // State cho ch·ªâ m·ª•c ·∫£nh hi·ªán t·∫°i
  const [currentImageIndices, setCurrentImageIndices] = useState({
    single: 0,
    double: 0,
    deluxe: 0,
  });

  // X·ª≠ l√Ω ch·ªçn d·ªãch v·ª•
  function handleServiceToggle(serviceId) {
    setSelectedServices((prev) => {
      if (prev.includes(serviceId)) {
        return prev.filter((id) => id !== serviceId);
      } else {
        return [...prev, serviceId];
      }
    });
  }

  // X·ª≠ l√Ω ch·ªçn ph√≤ng
  function handleRoomToggle(roomId) {
    setSelectedRooms((prev) => {
      if (prev.includes(roomId)) {
        return prev.filter((id) => id !== roomId);
      } else {
        return [...prev, roomId];
      }
    });
  }

  // T√≠nh t·ªïng ti·ªÅn
  function calculateTotal() {
    let total = 0;
    for (const roomId of selectedRooms) {
      const selectedRoomData = rooms.find((room) => room.id === roomId);
      if (selectedRoomData) {
        total += selectedRoomData.price;
      }
    }
    for (let i = 0; i < services.length; i++) {
      if (selectedServices.includes(services[i].id)) {
        total += services[i].price;
      }
    }
    return new Intl.NumberFormat("vi-VN").format(total);
  }

  // X·ª≠ l√Ω n√∫t ti·∫øp theo
  function handleNextStep() {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1);
    }
  }

  // X·ª≠ l√Ω thay ƒë·ªïi textarea
  function handleTextAreaChange(e) {
    const text = e.target.value;
    setAdditionalInfo(text);
    setRemainingChars(500 - text.length);
  }

  // X·ª≠ l√Ω chuy·ªÉn ·∫£nh
  function handlePrevImage(roomId) {
    setCurrentImageIndices((prev) => {
      const room = rooms.find((r) => r.id === roomId);
      if (!room) return prev;
      const currentIndex = prev[roomId];
      const newIndex = currentIndex === 0 ? room.images.length - 1 : currentIndex - 1;
      return { ...prev, [roomId]: newIndex };
    });
  }

  function handleNextImage(roomId) {
    setCurrentImageIndices((prev) => {
      const room = rooms.find((r) => r.id === roomId);
      if (!room) return prev;
      const currentIndex = prev[roomId];
      const newIndex = currentIndex === room.images.length - 1 ? 0 : currentIndex + 1;
      return { ...prev, [roomId]: newIndex };
    });
  }

  function handleDotClick(roomId, index) {
    setCurrentImageIndices((prev) => ({
      ...prev,
      [roomId]: index,
    }));
  }

  // Render b∆∞·ªõc 1
  function renderStep1() {
    return (
      <div className="step-container">
        <h1 className="page-title">Ch·ªçn ph√≤ng</h1>
        <p className="page-subtitle">
          <strong>T·ª± tin ƒë·∫∑t ph√≤ng:</strong> b·∫°n ƒëang tr√™n trang web c·ªßa kh√°ch s·∫°n.
        </p>

        {rooms.map((room) => (
          <div className="room-card" key={room.id}>
            <div className="room-header">
              <h2>{room.name}</h2>
            </div>

            <div className="room-image-container">
              <div className="image-slider">
                {room.images.map((image, index) => (
                  <img
                    key={index}
                    src={image || "/placeholder.svg"}
                    alt={`${room.name} ${index + 1}`}
                    className={`room-image ${index === currentImageIndices[room.id] ? "active" : ""}`}
                  />
                ))}
              </div>
              <div className="navigation-buttons">
                <button className="nav-button prev" onClick={() => handlePrevImage(room.id)}>
                  <span>‚ùÆ</span>
                </button>
                <button className="nav-button next" onClick={() => handleNextImage(room.id)}>
                  <span>‚ùØ</span>
                </button>
              </div>
              <div className="image-dots">
                {room.images.map((_, index) => (
                  <span
                    key={index}
                    className={`dot ${index === currentImageIndices[room.id] ? "active" : ""}`}
                    onClick={() => handleDotClick(room.id, index)}
                  ></span>
                ))}
              </div>
            </div>

            <div className="room-info-bar">
              <div className="bed-info">
                <span className="bed-icon">üõèÔ∏è</span>
                <span>{room.bedType}</span>
              </div>
              <div className="more-info">
                <span>Th√¥ng tin v√† h√¨nh ·∫£nh ph√≤ng</span>
              </div>
            </div>

            <div className="room-details">
              <div className="room-details-left">
                <h3 className="room-name">{room.title}</h3>
                <p className="room-description">{room.description}</p>
                <div className="room-features">
                  {room.features.map((feature, index) => (
                    <div className="feature" key={index}>
                      <span className="feature-icon">{feature.icon}</span>
                      <span>{feature.text}</span>
                    </div>
                  ))}
                </div>
              </div>

              <div className="room-details-right">
                <div className="room-capacity">
                  <span>{room.capacity}</span>
                </div>
                <div className="room-price">
                  <span>{room.priceText}</span>
                </div>
                <button
                  className={`apply-button ${selectedRooms.includes(room.id) ? "selected" : ""}`}
                  onClick={() => handleRoomToggle(room.id)}
                >
                  {selectedRooms.includes(room.id) ? "ƒê√É CH·ªåN" : "√ÅP D·ª§NG"}
                </button>
              </div>
            </div>
            <div className="tax-info">Bao g·ªìm thu·∫ø VAT / thu·∫ø ti√™u th·ª•</div>
          </div>
        ))}
      </div>
    );
  }

  // Render b∆∞·ªõc 2
  function renderStep2() {
    return (
      <div className="step-container">
        <h1 className="page-title">Ch·ªçn d·ªãch v·ª• th√™m cho k·ª≥ ngh·ªâ c·ªßa b·∫°n</h1>
        <p className="page-subtitle">
          <strong>T·ª± tin ƒë·∫∑t ph√≤ng:</strong> b·∫°n ƒëang tr√™n trang web c·ªßa kh√°ch s·∫°n.
        </p>

        <div className="section-header">
          <h2>D·ªãch v·ª• th√™m cho k·ª≥ ngh·ªâ c·ªßa b·∫°n</h2>
        </div>

        <div className="service-item">
          <div className="service-image">
            <img src="./Img_User/Img_Service_1.png" alt="ƒê∆∞a ƒë√≥n s√¢n bay m·ªôt chi·ªÅu" className="service-img" />
          </div>
          <div className="service-details">
            <h3 className="service-title">ƒê∆∞a ƒë√≥n s√¢n bay m·ªôt chi·ªÅu</h3>
            <button className="service-detail-btn">Chi ti·∫øt ‚ñ∏</button>
            <p className="service-price">
              1.000.000 VND <span className="price-note">(1.000.000 VND m·ªói ph√≤ng)</span>
            </p>
            <p className="service-tax">Bao g·ªìm thu·∫ø VAT / thu·∫ø ti√™u th·ª•</p>
          </div>
          <div className="service-action">
            <div className="checkbox-container">
              <span className="checkbox-label">Ch·ªçn</span>
              <div
                className={`checkbox ${selectedServices.includes("one-way") ? "checked" : ""}`}
                onClick={() => handleServiceToggle("one-way")}
              ></div>
            </div>
          </div>
        </div>

        <div className="service-item">
          <div className="service-image">
            <img src="./Img_User/Img_Service_2.png" alt="ƒê∆∞a ƒë√≥n s√¢n bay hai chi·ªÅu" className="service-img" />
          </div>
          <div className="service-details">
            <h3 className="service-title">ƒê∆∞a ƒë√≥n s√¢n bay hai chi·ªÅu</h3>
            <button className="service-detail-btn">Chi ti·∫øt ‚ñ∏</button>
            <p className="service-price">
              2.000.000 VND <span className="price-note">(2.000.000 VND m·ªói ph√≤ng)</span>
            </p>
            <p className="service-tax">Bao g·ªìm thu·∫ø VAT / thu·∫ø ti√™u th·ª•</p>
          </div>
          <div className="service-action">
            <div className="checkbox-container">
              <span className="checkbox-label">Ch·ªçn</span>
              <div
                className={`checkbox ${selectedServices.includes("two-way") ? "checked" : ""}`}
                onClick={() => handleServiceToggle("two-way")}
              ></div>
            </div>
          </div>
        </div>

        <div className="section-header">
          <h2>D·ªãch v·ª• th√™m cho k·ª≥ ngh·ªâ c·ªßa b·∫°n</h2>
        </div>

        <div className="additional-info">
          <p>Vui l√≤ng cung c·∫•p th√™m th√¥ng tin: th·ªùi gian ƒë·∫øn, s·ªë th√≠ch ƒÉn u·ªëng, s·ªë th·ªÉ th√†nh vi√™n...</p>
          <textarea
            className="info-textarea"
            value={additionalInfo}
            onChange={handleTextAreaChange}
            maxLength={500}
          />
          <div className="char-count">{remainingChars}/500</div>
          <p className="info-note">
            Y√™u c·∫ßu ƒë·∫∑c bi·ªát c·ªßa qu√Ω kh√°ch s·∫Ω ƒë∆∞·ª£c xem x√©t c·∫©n th·∫≠n, ch√∫ng t√¥i s·∫Ω c·ªë g·∫Øng ƒë·ªÉ ƒë√°p ·ª©ng c√°c y√™u c·∫ßu ƒë·∫∑c
            bi·ªát c·ªßa qu√Ω kh√°ch.
          </p>
        </div>
      </div>
    );
  }

  // Render b∆∞·ªõc 3
  function renderStep3() {
    const formatPrice = (price) => {
      return new Intl.NumberFormat("vi-VN").format(price);
    };

    const handleBookNow = () => {
      setIsModalOpen(true); // M·ªü modal khi nh·∫•n n√∫t
    };

    return (
      <div className="step-container">
        <h1 className="page-title">K·∫øt th√∫c k·ª≥ ngh·ªâ c·ªßa b·∫°n</h1>
        <p className="page-subtitle">
          <strong>T·ª± tin ƒë·∫∑t ph√≤ng:</strong> b·∫°n ƒëang tr√™n trang web c·ªßa kh√°ch s·∫°n.
        </p>

        <div className="section-header booking-dates">
          <h2>ƒê·∫∑t ph√≤ng c·ªßa b·∫°n - t·ª´ 16 Th√°ng T∆∞ 2025 ƒë·∫øn 18 Th√°ng T∆∞ 2025</h2>
        </div>

        <div className="hotel-info">
          <h3 className="hotel-name">Debug Hotel</h3>

          <div className="hotel-details">
            <div className="hotel-details-column">
              <div className="hotel-detail-item">
                <div className="detail-label">ƒê·ªãa ch·ªâ :</div>
                <div className="detail-value">V≈©ng T√†u</div>
              </div>

              <div className="hotel-detail-item">
                <div className="detail-label">Nh·∫≠n ph√≤ng t·ª´ :</div>
                <div className="detail-value">2:00 CH</div>
              </div>

              <div className="hotel-detail-item">
                <div className="detail-label">Tr·∫£ ph√≤ng tr∆∞·ªõc :</div>
                <div className="detail-value">12:00 CH</div>
              </div>

              <div className="hotel-detail-item">
                <div className="detail-label">Li√™n h·ªá :</div>
                <div className="detail-value">+84 1113060704</div>
              </div>
            </div>

            <div className="hotel-details-column">
              <div className="hotel-detail-item">
                <div className="detail-label">L·ªÖ t√¢n : </div>
                <div className="detail-value">H·ªçat ƒë·ªông 24/24</div>
              </div>
            </div>
          </div>
        </div>

        <div className="booking-summary">
          {rooms
            .filter((room) => selectedRooms.includes(room.id))
            .map((room, index) => (
              <div className="room-summary" key={room.id}>
                <div className="room-summary-header">
                  <div className="room-summary-title">Ph√≤ng {index + 1}</div>
                  <div className="room-summary-price">{room.priceText}</div>
                </div>

                <div className="room-summary-details">
                  <div className="room-summary-description">
                    <div className="room-type">{room.title}</div>
                    <div className="room-capacity">{room.capacity}</div>
                    <div className="room-features">
                      {room.features.map((feature, idx) => (
                        <div key={idx} className="room-feature">
                          <span className="feature-icon">{feature.icon}</span>
                          <span>{feature.text}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div className="room-summary-amenities">
                    <div className="amenity-badge">
                      <span className="amenity-icon">‚úì</span>
                      <span>Xu·∫•t s·∫Øc</span>
                    </div>
                    <div className="amenity-text">Bao g·ªìm b·ªØa s√°ng</div>
                  </div>
                </div>
              </div>
            ))}

          <div className="discount-row">
            <div className="discount-label">T·ªïng gi·∫£m gi√° ƒë∆∞·ª£c √°p d·ª•ng</div>
            <div className="discount-value">0 VND</div>
          </div>

          <div className="total-row main-total">
            <div className="total-label">T·ªïng</div>
            <div className="total-value">
              {formatPrice(
                rooms
                  .filter((room) => selectedRooms.includes(room.id))
                  .reduce((total, room) => total + room.price, 0) +
                  services
                    .filter((service) => selectedServices.includes(service.id))
                    .reduce((total, service) => total + service.price, 0)
              )}{" "}
              VND
            </div>
          </div>

          <div className="tax-rows">
            <div className="tax-row">
              <div className="tax-label">Bao g·ªìm: Ph√≠ d·ªãch v·ª•</div>
              <div className="tax-value">0 VND</div>
            </div>
            <div className="tax-row">
              <div className="tax-label">Bao g·ªìm: Thu·∫ø VAT / Thu·∫ø ti√™u th·ª•</div>
              <div className="tax-value">0 VND</div>
            </div>
          </div>
        </div>

        <div className="customer-info">
          <h3 className="section-title">Th√¥ng tin kh√°ch h√†ng</h3>

          <div className="form-group">
            <label htmlFor="fullName">H·ªç v√† t√™n:</label>
            <input type="text" id="fullName" className="form-control" />
          </div>

          <div className="form-group">
            <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i:</label>
            <input type="text" id="phone" className="form-control" />
          </div>

          <div className="form-group">
            <label htmlFor="email">Email:</label>
            <input type="email" id="email" className="form-control" />
          </div>

          <div className="form-group">
            <label htmlFor="idCard">CCCD:</label>
            <input type="text" id="idCard" className="form-control" />
          </div>

          <div className="form-group">
            <label htmlFor="address">ƒê·ªãa ch·ªâ:</label>
            <input type="text" id="address" className="form-control" />
          </div>
        </div>

        <div className="special-requests">
          <h3 className="section-title">Y√™u c·∫ßu ƒë·∫∑c bi·ªát</h3>
          <p className="request-note">
            Vui l√≤ng cung c·∫•p th√™m th√¥ng tin: th·ªùi gian ƒë·∫øn, s·ªü th√≠ch ƒÉn u·ªëng, s·ªë th·ªÉ th√†nh vi√™n...
          </p>
          <textarea
            className="request-textarea"
            value={additionalInfo}
            onChange={handleTextAreaChange}
            maxLength={500}
          ></textarea>
          <p className="char-count">{remainingChars}/500</p>
          <p className="request-disclaimer">
            Y√™u c·∫ßu ƒë·∫∑c bi·ªát c·ªßa qu√Ω kh√°ch s·∫Ω ƒë∆∞·ª£c xem x√©t c·∫©n th·∫≠n, ch√∫ng t√¥i s·∫Ω c·ªë g·∫Øng ƒë·ªÉ ƒë√°p ·ª©ng c√°c y√™u c·∫ßu ƒë·∫∑c
            bi·ªát c·ªßa qu√Ω kh√°ch.
          </p>
        </div>

        <div className="terms-conditions">
          <p className="terms-text">
            T√¥i ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n ƒë·∫∑t ph√≤ng v√† ch√≠nh s√°ch c·ªßa Debug Hotel. Khi nh·∫•n n√∫t ƒê·∫∑t ngay, t√¥i ƒë·ªìng √Ω
            v·ªõi:
          </p>
          <div className="terms-checkbox">
            <input type="checkbox" id="termsAgree" />
            <label htmlFor="termsAgree">
              T√¥i ƒë√£ ƒë·ªçc c√°c{" "}
              <a href="#" className="terms-link">
                ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán
              </a>{" "}
              v√†{" "}
              <a href="#" className="terms-link">
                ch√≠nh s√°ch b·∫£o m·∫≠t
              </a>
              , v√† t√¥i x√°c nh·∫≠n ƒë√£ hi·ªÉu v√† ch·∫•p nh·∫≠n c√°c ƒëi·ªÅu kho·∫£n n√†y.
            </label>
          </div>
        </div>

        <button className="book-now-button" onClick={handleBookNow}>
          ƒê·∫∂T NGAY
        </button>

        <p className="booking-disclaimer">
          Debug Hotel R·∫•t th·∫•p ƒë·ªè khi qu√Ω v·ªã ƒë·∫∑t ph√≤ng c·ªßa qu√Ω v·ªã. ƒê·ªÉ bi·∫øt th√™m th√¥ng tin v·ªÅ ch√≠nh s√°ch √Ω d·ªãch v·ª• c·ªßa
          nh√† v√† ƒë·ªÉ th·ª±c hi·ªán c√°c thay ƒë·ªïi cho vi·ªác ƒë·∫∑t ph√≤ng c·ªßa qu√Ω v·ªã, vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i.
        </p>
      </div>
    );
  }

  // Render sidebar
  function renderSidebar() {
    return (
      <div className="sidebar-card">
        <div className="sidebar-header">
          {currentStep === 1
            ? `Ch·ªçn ph√≤ng (${selectedRooms.length})`
            : currentStep === 2
            ? "Ch·ªçn d·ªãch v·ª• th√™m"
            : "X√°c nh·∫≠n ƒë·∫∑t ph√≤ng"}
        </div>

        <div className="sidebar-content">
          <div className="total-row">
            <span>T·ªïng</span>
            <span>{calculateTotal()} VND</span>
          </div>
        </div>

        <button className="next-button" onClick={handleNextStep}>
          K·∫æ TI·∫æP
        </button>

        <div className="rating-container">
          <div className="rating-badge">4.5</div>
          <div>
            <div className="rating-text">Xu·∫•t s·∫Øc</div>
            <div className="rating-stars">
              ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ <span>790 ƒë√°nh gi√°</span>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Render ch√≠nh
  return (
    <>
      <div className="booking-container">
        <HeaderBookingRoom currentStep={currentStep} onStepChange={setCurrentStep} />

        <div className="booking-content">
          <div className="booking-main">
            {currentStep === 1 && renderStep1()}
            {currentStep === 2 && renderStep2()}
            {currentStep === 3 && renderStep3()}
          </div>

          {currentStep !== 3 && <div className="booking-sidebar">{renderSidebar()}</div>}
        </div>
      </div>
      <FooterUser />
      {isModalOpen && <Notification_BookingRoom onClose={() => setIsModalOpen(false)} />}
    </>
  );
}